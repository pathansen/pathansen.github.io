{"version":3,"sources":["components/ProjectModal.module.css","components/Project.module.css","components/Projects.module.css","components/About.module.css","logo.svg","components/About.js","components/ProjectModal.js","components/Project.js","components/Projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","modalBackground","modalForeground","close","closeText","projectItem","titleCard","repositoryLink","projectHeader","projectRow","projectColumn","aboutHeader","__webpack_require__","p","about","props","react_default","a","createElement","className","classes","style","margin","marginBottom","ProjectModal","handleKeyUp","event","toggleModal","_this","keyCode","handleClosePress","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","projectName","this","onKeyPress","onClick","handleOutsideModal","React","Component","Project","state","displayModal","toggleModalHandler","updateDisplayModal","setState","_this$props","projectLanguage","projectRepoLink","components_ProjectModal","fontWeight","href","Projects","data","componentWillMount","thumbnail","title","width","paddingLeft","id","map","project","components_Project","App","About","components_Projects","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b784bd58.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalBackground\":\"ProjectModal_modalBackground__1zuvk\",\"modalForeground\":\"ProjectModal_modalForeground__1z452\",\"close\":\"ProjectModal_close__Ua3x-\",\"closeText\":\"ProjectModal_closeText__1UF16\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"projectItem\":\"Project_projectItem__kM0s8\",\"titleCard\":\"Project_titleCard__3dnF3\",\"repositoryLink\":\"Project_repositoryLink__2b7Sx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"projectHeader\":\"Projects_projectHeader__1xxew\",\"projectRow\":\"Projects_projectRow__3LLLQ\",\"projectColumn\":\"Projects_projectColumn__3Vwc9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aboutHeader\":\"About_aboutHeader__2EeZG\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nimport classes from './About.module.css'\r\n\r\nconst about = (props) => {\r\n  return (\r\n    <div className={classes.aboutHeader}>\r\n      <h1 style={{margin:\"0\"}}>PATRICK HANSEN</h1>\r\n      <h6 style={{margin:\"0\", marginBottom:\"10%\"}}>Web Development | Machine Learning | Data Science</h6>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default about;\r\n","import React from 'react';\r\n\r\nimport classes from './ProjectModal.module.css'\r\n\r\nclass ProjectModal extends React.Component {\r\n\r\n  handleKeyUp = (event) => {\r\n    const { toggleModal } = this.props;\r\n    if (event.keyCode === 27) {\r\n      toggleModal();\r\n    }\r\n  }\r\n\r\n  handleClosePress = (event) => {\r\n    const { toggleModal } = this.props;\r\n    toggleModal();\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    document.addEventListener('keyup', this.handleKeyUp, false);\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    document.removeEventListener('keyup', this.handleKeyUp, false);\r\n  }\r\n\r\n  render() {\r\n\r\n    const { projectName } = this.props;\r\n\r\n    return (\r\n      <div\r\n        className={classes.modalBackground}\r\n        onKeyPress={this.handleKeyUp}\r\n        onClick={this.handleOutsideModal}>\r\n\r\n        <div className={classes.modalForeground}>\r\n          <div onClick={this.handleClosePress} className={classes.close}>\r\n            <p className={classes.closeText}>&times;</p>\r\n          </div>\r\n          <p>{projectName}</p>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ProjectModal;\r\n","import React from 'react';\r\n\r\nimport ProjectModal from './ProjectModal'\r\nimport classes from './Project.module.css'\r\n\r\nclass Project extends React.Component {\r\n\r\n  state = {\r\n    displayModal: false\r\n  }\r\n\r\n  toggleModalHandler = () => {\r\n    const updateDisplayModal = !this.state.displayModal;\r\n    this.setState({ displayModal: updateDisplayModal });\r\n  }\r\n\r\n  render() {\r\n\r\n    const { projectName, projectLanguage, projectRepoLink} = this.props;\r\n    const { displayModal } = this.state;\r\n\r\n    return (\r\n      <div>\r\n\r\n        {displayModal &&\r\n          <ProjectModal\r\n            toggleModal={this.toggleModalHandler}\r\n            projectName={projectName}\r\n            projectLanguage={projectLanguage}\r\n            projectRepoLink={projectRepoLink} />\r\n        }\r\n\r\n        <div className={classes.projectItem} onClick={this.toggleModalHandler}>\r\n          <div className={classes.titleCard}>\r\n            <h4 style={{margin:\"0\"}}>{projectName}</h4>\r\n            <h6 style={{margin:\"0\", fontWeight:\"normal\"}}>({projectLanguage})</h6>\r\n          </div>\r\n            <a className={classes.repositoryLink} href={projectRepoLink}>\r\n              <div href={projectRepoLink}>\r\n                <h6 style={{margin:\"0\", fontWeight:\"normal\"}}>GitHub Repository</h6>\r\n              </div>\r\n            </a>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Project;\r\n","import React from 'react';\r\n\r\nimport Project from './Project'\r\nimport classes from './Projects.module.css'\r\n\r\nclass Projects extends React.Component {\r\n\r\n  state = {\r\n    data: []\r\n  }\r\n\r\n  componentWillMount = () => {\r\n    const data = [\r\n      {\r\n        'projectName': 'Portfolio Website',\r\n        'projectLanguage': 'ReactJS',\r\n        'projectRepoLink': 'https://github.com/pathansen/portfolio-source',\r\n        'thumbnail': ''\r\n      },\r\n      {\r\n        'projectName': 'Project 2',\r\n        'projectLanguage': 'ReactJS',\r\n        'projectRepoLink': 'https://github.com/pathansen/portfolio-source',\r\n        'thumbnail': ''\r\n      }\r\n    ];\r\n\r\n    this.setState({ data: data });\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    document.title = 'Patrick Hansen';\r\n  }\r\n\r\n  render() {\r\n\r\n    const { data } = this.state;\r\n\r\n    return (\r\n      <div className={classes.projectHeader}>\r\n        <h1>Projects</h1>\r\n\r\n        <div className=\"responsive-grid\" style={{width:\"95%\", paddingLeft:\"1%\"}}>\r\n          <div className=\"row\" id={classes.projectRow}>\r\n\r\n            {data.map(project => {\r\n              return (\r\n                <div className=\"column\" id={classes.projectColumn}>\r\n                  <Project\r\n                    projectName={project.projectName}\r\n                    projectLanguage={project.projectLanguage}\r\n                    projectRepoLink={project.projectRepoLink} />\r\n                </div>\r\n              )\r\n            })}\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Projects;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport About from './components/About'\nimport Projects from './components/Projects'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n\n        <About />\n\n        <Projects />\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}